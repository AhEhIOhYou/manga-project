generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model author {
  id                       Int    @id(map: "author_pk") @default(autoincrement())
  name                     String @unique @db.VarChar(255)
  book_book_authorToauthor book[] @relation("book_authorToauthor")
}

model book {
  id                         Int        @id(map: "book_pk") @default(autoincrement())
  title                      String
  alt_title                  String?
  link_title                 String     @unique
  author                     Int
  type                       Int        @db.SmallInt
  description                String?
  cover                      String?
  release_year               Int?       @db.SmallInt
  created_at                 DateTime   @db.Timestamp(6)
  loader_user_id             String?    @db.Uuid
  author_book_authorToauthor author     @relation("book_authorToauthor", fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_author_id_fk")
  book_types                 book_types @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_book_types_null_fk")
  users                      users?     @relation(fields: [loader_user_id], references: [user_id], onUpdate: NoAction, map: "book_users_null_fk")
  chapter                    chapter[]
  comments                   comments[]
}

model book_types {
  id   Int    @id(map: "book_types_pk") @default(autoincrement())
  name String @unique @db.VarChar(50)
  book book[]
}

model chapter {
  id               Int              @id(map: "chapter_pk") @default(autoincrement())
  title            String           @db.VarChar(255)
  volume           Int?
  number           Int
  translator       Int
  book_id          Int
  created_at       DateTime         @db.Timestamp(6)
  page_count       Int?
  loader_user_id   String?          @db.Uuid
  book             book             @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chapter_book_null_fk")
  translation_team translation_team @relation(fields: [translator], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chapter_translator_id_fk")
  users            users?           @relation(fields: [loader_user_id], references: [user_id], onUpdate: NoAction, map: "chapter_users_user_id_fk")
  comments         comments[]
  page             page[]
}

model comments {
  id         Int      @id(map: "comments_pk") @default(autoincrement())
  book_id    Int?
  chapter_id Int?
  message    String
  likes      Int?
  dislikes   Int?
  is_deleted Boolean
  created_at DateTime @db.Timestamp(6)
  author     String?  @db.Uuid
  book       book?    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_book_null_fk")
  chapter    chapter? @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_chapter_null_fk")
  users      users?   @relation(fields: [author], references: [user_id], onUpdate: NoAction, map: "comments_users_user_id_fk")
}

model page {
  id             Int      @id(map: "page_pk") @default(autoincrement())
  file_name      String
  chapter_id     Int
  created_at     DateTime @db.Timestamp(6)
  number         Int
  loader_user_id String?  @db.Uuid
  chapter        chapter  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "page_chapter_null_fk")
  users          users?   @relation(fields: [loader_user_id], references: [user_id], onUpdate: NoAction, map: "page_users_user_id_fk")
}

model translation_team {
  id         Int          @id(map: "translator_pk") @default(autoincrement())
  name       String       @db.VarChar(255)
  owner      String?      @db.Uuid
  chapter    chapter[]
  users      users?       @relation(fields: [owner], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "translation_team_users_user_id_fk")
  user_teams user_teams[]
}

model user_teams {
  id_user             String           @db.Uuid
  id_translation_team Int
  id                  Int              @id(map: "user_teams_pk") @default(autoincrement())
  translation_team    translation_team @relation(fields: [id_translation_team], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_teams_translation_team_null_fk")
  users               users            @relation(fields: [id_user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_teams_users_null_fk")
}

model users {
  id               Int                @id @default(autoincrement())
  email            String             @unique @db.VarChar(255)
  password         String
  username         String             @unique @db.VarChar(255)
  user_id          String             @unique @db.Uuid
  refresh_token    String?
  avatar           String?            @db.VarChar(255)
  book             book[]
  chapter          chapter[]
  comments         comments[]
  page             page[]
  translation_team translation_team[]
  user_teams       user_teams[]
}
