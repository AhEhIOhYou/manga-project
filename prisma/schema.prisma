generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model book {
  id             Int        @id(map: "book_pk") @default(autoincrement())
  title          String
  alt_title      String?
  link_title     String
  author         String     @db.VarChar(255)
  type           String     @db.VarChar(100)
  description    String?
  cover          String?
  release_date   DateTime?  @db.Date
  created_at     DateTime   @db.Timestamp(6)
  loader_user_id Int        @default(1)
  users          users      @relation(fields: [loader_user_id], references: [id], onDelete: SetDefault, onUpdate: NoAction, map: "book_users_null_fk")
  chapter        chapter[]
  comments       comments[]
}

model chapter {
  id             Int        @id(map: "chapter_pk") @default(autoincrement())
  title          String     @db.VarChar(255)
  volume         Int?
  number         Int
  translator     String     @db.VarChar(255)
  book_id        Int
  loader_user_id Int        @default(1)
  created_at     DateTime   @db.Timestamp(6)
  page_count     Int?
  book           book       @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chapter_book_null_fk")
  users          users      @relation(fields: [loader_user_id], references: [id], onDelete: SetDefault, onUpdate: NoAction, map: "chapter_users_null_fk")
  comments       comments[]
  page           page[]
}

model comments {
  id          Int      @id(map: "comments_pk") @default(autoincrement())
  book_id     Int?
  chapter_id  Int?
  author_id   Int      @default(1)
  message     String
  root_id     Int?
  parent_id   Int?
  likes       Int?
  dislikes    Int?
  child_count Int?
  is_deleted  Boolean
  created_at  DateTime @db.Timestamp(6)
  book        book?    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_book_null_fk")
  chapter     chapter? @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_chapter_null_fk")
  users       users    @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_users_id_fk")
}

model page {
  id             Int      @id(map: "page_pk") @default(autoincrement())
  file_name      String
  chapter_id     Int
  loader_user_id Int      @default(1)
  created_at     DateTime @db.Timestamp(6)
  number         Int
  chapter        chapter  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "page_chapter_null_fk")
  users          users    @relation(fields: [loader_user_id], references: [id], onDelete: SetDefault, onUpdate: NoAction, map: "page_users_null_fk")
}

model users {
  id            Int        @id @default(autoincrement())
  email         String     @unique @db.VarChar(255)
  password      String
  username      String     @unique @db.VarChar(255)
  user_id       String     @unique @db.Uuid
  refresh_token String?
  book          book[]
  chapter       chapter[]
  comments      comments[]
  page          page[]
}
